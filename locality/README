# CS40_HW3_2023
Authors: 
Matthew Wong and Andersen Prince

Help Recieved: 
Simon and Aiden helped answer a question about strange coloring 
with the pixels (I made sure not to show them the code)

Overview:
We have implemented the rotate 0, 90, 180, and 270 degrees, as well as the flip
horizontal, flip vertical, transpose, and time operations in the correct way.
Note that multiple flags is undefined behavior. In addition, the bash file
works with tests we had in our folder. However, the tests are too big
so the submission refuses to handle it. Thus, the bash file tests worked
for the most part (except for the fact that jpegtrans didn't work on our
images) but we were able to run it

Architecture:
            Image            Image         Rotated Image 
/-----------\    /-----------\    /-----------\    /-----------\
|   Flag    |---\|  Image    |---\|   Image   |---\|   Image   |______(STDOUT)
|   Parcer  |---/|  Reader   |---/|   Mapper  |---/|   Writer  |
\-----------/    \-----------/    \-----------/    \-----------/
            Methods             

In our program we have four crucial modules, which is essentially the methods 
we used to carry out the entire functionality of this assignment. As an 
overview, we include a flag parcer, an image reader, an imageMapper, and a 
image writer. The flag parcer determines which operation that the client 
performs on an image. These operations include rotation 0, 90, 180, and 270 
degrees, among others. In other words, it helps the computer decipher which of 
the operations is called, giving the computer a way to call the right operation
on the image. The flag parcer essentially spits out an, image, the A2Methods, 
as well as the timing file.  Adding to this, we also created an image reader 
which helps us to read the provided image from the client. This gives us a way 
to store this information in order to perform the operations listed above. 
With this information, we feed it to our imageMapper. The imageMapper takes
in an image, a A2Methods_mapfun function, the operation which is determined by 
flag parcer, as well as the timing file. In essence, imageMapper begins the 
timer, runs the operation, and ends the timer. Finally, we also write to stdout
using the pnm_ppm, allowing the client to see the image after the operation 
that they ran. 

Timing Table: 
Computer Specs:
        Lenovo Legion 5
        64-bit operating system, x64-based processor
        AMD Ryzen 7 4800H with Radeon Graphics 2.90 GHz
We used a custom ppm called bigTest.ppm, with dimensions (8192 x 8192)

           |Total Time      | Time per pixel | Approximate instruction count
Row    0   |         865 ns |        0 ns/px |   0 instructions/px
Row    90  | 10300514578 ns |      153 ns/px | 153 instructions/px
Row    180 |  3723970005 ns |       55 ns/px |  55 instructions/px
Row    270 |  9643048111 ns |      144 ns/px | 144 instructions/px
Column 0   |         800 ns |        0 ns/px |   0 instructions/px
Column 90  |  9297667496 ns |      139 ns/px | 139 instructions/px
Column 180 | 14412940595 ns |      215 ns/px | 215 instructions/px
Column 270 |  8780674527 ns |      131 ns/px | 131 instructions/px
Block  0   |        1019 ns |        0 ns/px |   0 instructions/px
Block  90  |  6410109563 ns |       96 ns/px |  96 instructions/px
Block  180 |  6147835668 ns |       92 ns/px |  92 instructions/px
Block  270 |  6253260291 ns |       93 ns/px |  93 instructions/px

These results aligned mostly with our predicitions. For example, we predicted 
that row 180 would be the fastest operations outside the 0 degree. On the other
hand, we noticed that column 180 was the longest operation. Beyond this,
we noticed that blocked arrays was pretty much consistent for most of the 
operations that we ran. Meanwhile, other rotations such as row and column were
pretty scattered when looking at the time per pixel. 

Time Spent: We spent a total of 33hrs